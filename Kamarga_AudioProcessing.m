% AMATH 482 - Homework 2
% Khrisna Kamarga

%% Part I
clear all; close all; clc;

% 1. Through use of the Gabor filtering we used in class, produce 
%    spectrograms of the piece of work.
% 2. Explore the window width of the G´abor transform and how it 
%    effects the spectrogram.
% 3. Explore the spectrogram and the idea of oversampling (i.e. using 
%    very small translations of
%    the G´abor window) versus potential undersampling 
%    (i.e. using very course/large translations of the G´abor window).
% 4. Use different G´abor windows. Perhaps you can start with the 
%    Gaussian window, and look to see how the results are effected with 
%    the Mexican hat wavelet and a step-function (Shannon)window.

load handel % load the "Halleluya" song
v = y'/2; % convert into row vector, attenuate the volume by half
v(end) = []; % since the length is not even, take out the last element
plot((1:length(v))/Fs,v); % plotting the song
t = (1:length(v))/Fs; % making time vector (length Fs)
L = max(t); n = length(t); % prepare the variables for fft
k=(2*pi/L)*[0:n/2-1 -n/2:-1];
xlabel('Time [sec]');
ylabel('Amplitude');
title('Signal of Interest, v(n)');
p8 = audioplayer(v,Fs); % play the song
playblocking(p8); % ???

%% Gabor Filtering Animation
tslide = 0:0.05:9; % sampling time
twindow = 12; % the width of the super gaussian (it's yuuuge)
for j = 1:length(tslide) % each sample
    g = exp(-(twindow*(t-tslide(j))).^10); % super gaussian
%     sigma = 0.05;
%     g = 2/(sqrt(3*sigma)*pi^0.25)*(1-((t-tslide(j))/sigma).^2).*exp(-(t-tslide(j)).^2/(2*sigma^2));
    vf = g.*v; % gabor filtering
    vft = fft(vf); % fourier transform of each wavelet
    subplot(3,1,1)
    plot(t,v,'k-',t,g,'r-') % the original song
    subplot(3,1,2)
    plot(t,vf,'k-') % each wavelet
    axis([0 9 -0.5 0.5])
    subplot(3,1,3)
    plot(fftshift(k),abs(fftshift(vft)/max(abs(vft))),'b-'); 
    % fourier wavelet
    pause(0.01)
end

%% Spectrogram
clc; close all;
t_sample = 0.05; %sampling rate
%0.05

tslide = 0:t_sample:9; % sampling time
twindow = 2; % the width of the super gaussian (it's yuuuge)
%10000000000000
%sigma = 0.05 sometimes 0.1
spc=[]; %matrix of all the wavelets
for j=1:length(tslide)
    g = exp(-(twindow*(t-tslide(j))).^10); % super gaussian
%     sigma = 0.05;
%     g = 2/(sqrt(3*sigma)*pi^0.25)*(1-((t-tslide(j))/sigma).^2).*exp(-(t-tslide(j)).^2/(2*sigma^2));
    vf=g.*v;
    yft=fft(vf);
    spc=[spc;abs(fftshift(yft))];
end
% spectrogram
pcolor(tslide,fftshift(k)/(2*pi),spc.'), shading interp, colormap(hot)
title("Messiah by Handel"); 
xlabel("time (s)");
ylabel("frequency (Hz)");
axis([0 9 0 1e+04/(2*pi)])

%% Part II
clear all; close all; clc;

% 1. Through use of the G´abor filtering we used in class, 
%    reproduce the music score for this simple piece. See Fig. 1 which has 
%    the music scale in Hertz. (note: to get a good clean score, you
%    may want to filter out overtones... see below).
% 2. What is the difference between a recorder and piano? Can you see 
%    the difference in the timefrequency analysis? Note that many people 
%    talk about the difference of instruments being related to the 
%    timbre of an instrument. The timbre is related to the overtones 
%    generated by the instrument for a center frequency. Thus if you are 
%    playing a note at frequency ?0, an instrument will generate overtones 
%    at 2?0, 3?0, · · · and so forth.

% Piano

tr_piano=16; % record time in seconds
y=audioread('music1.wav'); Fs=length(y)/tr_piano;
v = y'/2;
plot((1:length(v))/Fs,v);
xlabel('Time [sec]'); ylabel('Amplitude');
title('Mary had a little lamb (piano)'); drawnow
p8 = audioplayer(y,Fs); playblocking(p8);
%% Spectogram
t = (1:length(v))/Fs; % time vector
L = max(t); n = length(t); % prepare for fft
k=(2*pi/L)*[0:n/2-1 -n/2:-1]; % wave numbers

tslide = 0:0.1:max(t); % sampling time
twindow = 10000000000000; %the width of the super gaussian
tau = 0.00001; % gaussian filter width

spc=[]; % all gabor wavelets
spcf=[]; % all filtered gabor wavelets
for j=1:length(tslide)
    g = exp(-twindow*(t-tslide(j)).^10); % super gaussian
    vf=g.*v; % gabor wavelets
    vft=fft(vf); % fourier transform of the wavelets
    ind = ind2sub(n, find(vft == max(vft))); % finding the strongest freq.
    kc = k(ind); % the corresponding wave number for the strongest freq.
    filter = exp(-tau*((k - kc).^2)); % gaussian filter
    vftf=filter.*vft; % filtered freq. domain wavelets
    spc=[spc;abs(fftshift(vft))];
    spcf=[spcf;abs(fftshift(vftf))];
end

% figure(1)
% pcolor(tslide,fftshift(k)/(2*pi),1000*abs(spc.')), shading interp, colormap(hot)
% axis([0 max(t) 0 10000/(2*pi)]);
% xlabel('Time [sec]'); ylabel('Frequency (Hz)');
% title('Mary had a little lamb (piano)');
figure(2)
pcolor(tslide,fftshift(k)/(2*pi),1000*abs(spcf.')/max(max(abs(spcf.')))), shading interp, colormap(hot)
axis([0 max(t) 0 10000/(2*pi)]);
xlabel('Time [sec]'); ylabel('Frequency (Hz)');
title('Filtered Mary had a little lamb (piano)');
%% Recovering the Filtered Time Domain Song
clc;
tau = 0.00001;
tspan = max(t)/length(tslide);
tpatch = 0:tspan:max(t);

v_filtered = zeros(size(k)); % filtered time domain song
for l = 1:length(tslide)
    g = exp(-twindow*(t-tslide(l)).^10);
    vf=g.*v;
    vft=fft(vf);
    ind = ind2sub(n, find(vft == max(vft)));
    kc = k(ind);
    filter = exp(-tau*((k - kc).^2));
    vftf=filter.*vft;
    vff = real(ifft(vftf)); %real part of the filtered time domain song
    v_filtered = v_filtered + vff;
end
%%
p8 = audioplayer(v_filtered*10,Fs); playblocking(p8);
%% Recorder
clear all; clc; close all;

tr_rec=14; % record time in seconds
y=audioread('music2.wav'); Fs=length(y)/tr_rec;
v = y'/2;
plot((1:length(v))/Fs,v);
xlabel('Time [sec]'); ylabel('Amplitude');
title('Mary had a little lamb (recorder)'); drawnow
p8 = audioplayer(y,Fs); playblocking(p8);
%% Spectogram
t = (1:length(v))/Fs; % time vector
L = max(t); n = length(t); % prepare for fft
k=(2*pi/L)*[0:n/2-1 -n/2:-1]; % wave numbers

tslide = 0:0.1:max(t); % sampling time
twindow = 10000000000000; %the width of the super gaussian
tau = 0.001; % gaussian filter width

spc=[]; % all gabor wavelets
spcf=[]; % all filtered gabor wavelets
for j=1:length(tslide)
    g = exp(-twindow*(t-tslide(j)).^10); % super gaussian
    vf=g.*v; % gabor wavelets
    vft=fft(vf); % fourier transform of the wavelets
    ind = ind2sub(n, find(vft == max(vft))); % finding the strongest freq.
    kc = k(ind); % the corresponding wave number for the strongest freq.
    filter = exp(-tau*((k - kc).^2)); % gaussian filter
    vftf=filter.*vft; % filtered freq. domain wavelets
    spc=[spc;abs(fftshift(vft))];
    spcf=[spcf;abs(fftshift(vftf))];
end
%%
figure(1)
pcolor(tslide,fftshift(k)/(2*pi),1000*abs(spc.')), shading interp, colormap(hot)
axis([0 max(t) 0 10000/(2*pi)]);
xlabel('Time [sec]'); ylabel('Frequency (Hz)');
title('Mary had a little lamb (recorder)');
figure(2)
pcolor(tslide,fftshift(k)/(2*pi),1000*abs(spcf.')/max(max(abs(spcf.')))), shading interp, colormap(hot)
axis([0 max(t) 0 10000/(2*pi)]);
xlabel('Time [sec]'); ylabel('Frequency (Hz)');
title('Filtered Mary had a little lamb (recorder)');
%% Recovering the Filtered Time Domain Song
clc;
tau = 0.001;
tspan = max(t)/length(tslide);
tpatch = 0:tspan:max(t);

v_filtered = zeros(size(k)); % filtered time domain song
for l = 1:length(tslide)
    g = exp(-twindow*(t-tslide(l)).^10);
    vf=g.*v;
    vft=fft(vf);
    ind = ind2sub(n, find(vft == max(vft)));
    kc = k(ind);
    filter = exp(-tau*((k - kc).^2));
    vftf=filter.*vft;
    vff = real(ifft(vftf)); %real part of the filtered time domain song
    v_filtered = v_filtered + vff;
end
%%
p8 = audioplayer(v_filtered*10,Fs); playblocking(p8); %filtered song